Message structure:
[header][body]

Header structure:
[body size][message type]
Body size and message type is 4 bytes variables (it means that the header size is 8 bytes).

Body structure:
Json

Examples:

System type:

[[0x00000031][0x00000001]]
[{"login" : "retard", "password" : "iamnotretard"}]

[[0x00000031][0x00000001]]
[{"url_to_upload_map" : "grief.ly/FFFFFFFFFFFFFFFF"}]

[[0x00000035][0x00000001]]
[{"url_to_download_map" : "grief.ly/FFFFFFFFFFFFFFFF"}]


Ordinary typa (aka keyboard type):
[[0x0000001C][0x00000002]]
[{"id" : 1, "key" : "KEY_UP"}]

[[0x00000020][0x00000002]]
[{"id" : 0, "key" : "CREATE_NEW"}]

Message type:
[[0x00000032][0x00000003]]
[{"id" : 1, "type" : "OOC", "text" : "Hello world"}]


PROTOCOL:

I. LOGIN STAGE

1. from CLIENT to SERVER:
protocol version, 4 bytes ("S132")

2. from CLIENT to SERVER
type: 1 (SYSTEM)
{"login" : "Someone", "password" : "12345", "game_version" : "v0.2.1"}

3.
(It is better to check game version first always)
b) WRONG GAME VERSION
 from SERVER to CLIENT
type: 1 (SYSTEM)
{"error" : "game_version", "correct_game_version" : "v0.2.2"}
-> connection closed

a) WRONG LOGIN OR PASSWORD
 from SERVER to CLIENT
type: 1 (SYSTEM)
{"error" : "authentication"}
-> connection closed

c) MASTER CLIENT DOES NOT EXIST
 from SERVER to CLIENT
Server creates new client, gives number to him (number - NOT -1)
type: 1 (SYSTEM)
{"error" : "success", "map" : "no_map", "your_id" : 42}
New client now master client

d) MASTER CLIENT EXISTS AND "login" DOES NOT HAVE ID
Server creates new client, gives number to him (number - NOT -1)

 from SERVER to ALL CLIENTS
 type: 5 (NEW CLIENT)
 "id" - new number for new client
{"id" : 42}

 from SERVER to MASTER CLIENT
 type: 1 (SYSTEM)
{"url_to_upload_map" : "grief.ly/blah"}

 from SERVER to CLIENT
type: 1 (SYSTEM)
{"error" : "success", "map" : "grief.ly/blah", "your_id" : 42}

c) MASTER CLIENT EXISTS AND "login" DOES HAVE ID
Server uses existing client info, takes number from that info

 from SERVER to MASTER CLIENT
 type: 1 (SYSTEM)
{"url_to_upload_map" : "grief.ly/blah"}

 from SERVER to CLIENT
type: 1 (SYSTEM)
{"error" : "success", "map" : "grief.ly/blah", "your_id" : 24}

d) UNDEFINED ERROR
For example, during the process master client disconnects, or something else

 from SERVER to CLIENT
{"error" : "undefined"}

////////////////////////////////
END OF LOGIN STAGE

II. ACTIVE CONNECTION STAGE

No specific order

X - NOT 1 (X may be 2, 3, 4, etc)
In other words, if other action is not defined for this type of the message then server should broadcast the message

1. 

from CLIENT to SERVER
 type: X
{some json}

after that

from SERVER to ALL CLIENTS (event inital client):
 type: X
{"id" : 42, some json}

2.

from SERVER to CLIENT
 type: 4 (NEW_TICK)
(empty)

































