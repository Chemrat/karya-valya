CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(KVEngineQt)

SET(CMAKE_AUTOMOC ON)
SET(CMAKE_AUTOUIC ON)
SET(CMAKE_INCLUDE_CURRENT_DIR ON)

SET(SOURCE_DIR Sources/)
SET(EXEC_DIR Exec/)

SET(LOKI_DIR third_party/loki-0.1.7/include/loki)

FIND_PACKAGE(Qt5Network REQUIRED)
FIND_PACKAGE(Qt5Core REQUIRED)
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5OpenGL REQUIRED)
FIND_PACKAGE(SDL REQUIRED)
FIND_PACKAGE(SDL_ttf REQUIRED)
FIND_PACKAGE(SDL_image REQUIRED)

INCLUDE_DIRECTORIES(${LOKI_DIR})

INCLUDE_DIRECTORIES(${SDL_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${SDL_IMAGE_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${SDL_TTF_INCLUDE_DIR})

INCLUDE_DIRECTORIES("Sources")

INCLUDE_DIRECTORIES($ENV{SDL_NET_INCLUDE_DIRS})
INCLUDE_DIRECTORIES($ENV{PNG_INCLUDE_DIR})
INCLUDE_DIRECTORIES($ENV{SFML_INCLUDE_DIR})
INCLUDE_DIRECTORIES($ENV{ZLIB_INCLUDE_DIR})

IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")
ENDIF()

IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(GIT_CMD git)
ELSE()
    SET(GIT_CMD "$ENV{GIT_PATH}")
ENDIF()

EXECUTE_PROCESS(
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMAND ${GIT_CMD} describe --tags --abbrev=4
    OUTPUT_VARIABLE CLIENT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
MESSAGE(STATUS ${CLIENT_VERSION})

IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_CXX_FLAGS "-DDEFINED_VERSION=\"${CLIENT_VERSION}\" ${CMAKE_CXX_FLAGS}")
ELSE()
    SET(CMAKE_CXX_FLAGS "/DDEFINED_VERSION=\"${CLIENT_VERSION}\" ${CMAKE_CXX_FLAGS}")
ENDIF()

IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(GO_CMD go)
ELSE()
    SET(GO_CMD "$ENV{GO_PATH}")
ENDIF()

IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(GOFMT_CMD go)
ELSE()
    SET(GOFMT_CMD "$ENV{GOFMT_PATH}")
ENDIF()

MESSAGE(STATUS ${GO_CMD})
MESSAGE(STATUS ${GOFMT_CMD})

EXECUTE_PROCESS(
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/knv-server-go
    COMMAND ${GOFMT_CMD} -w .)
EXECUTE_PROCESS(
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/knv-server-go
    COMMAND ${GO_CMD} build -ldflags "-X main.clientVersionBuild ${CLIENT_VERSION}")

FILE(GLOB SOURCES "${SOURCE_DIR}*.cpp")
FILE(GLOB HEADERS "${SOURCE_DIR}*.h")
FILE(GLOB FORMS "${SOURCE_DIR}*.ui")

QT5_WRAP_UI(FORMS_HEADERS ${FORMS})

#ADD_EXECUTABLE(KVEngine ${SOURCES} ${HEADERS})

ADD_EXECUTABLE(KVEngine WIN32 ${SOURCES} ${HEADERS} ${FORMS_HEADERS})

#SET(CMAKE_EXE_LINKER_FLAGS "/DEBUG")

qt5_use_modules(KVEngine Core)
qt5_use_modules(KVEngine Network)
qt5_use_modules(KVEngine Widgets)
qt5_use_modules(KVEngine OpenGL)

TARGET_LINK_LIBRARIES(KVEngine ${SDL_LIBRARY})
TARGET_LINK_LIBRARIES(KVEngine ${SDL_IMAGE_LIBRARY})
TARGET_LINK_LIBRARIES(KVEngine ${SDL_TTF_LIBRARY})

IF(WIN32)
    TARGET_LINK_LIBRARIES(KVEngine $ENV{SDL_NET_LIBRARIES})
    TARGET_LINK_LIBRARIES(KVEngine $ENV{PNG_LIBRARY})
    TARGET_LINK_LIBRARIES(KVEngine $ENV{ZLIB_LIBRARY})
    TARGET_LINK_LIBRARIES(KVEngine $ENV{SFML_LIBRARY})
    TARGET_LINK_LIBRARIES(KVEngine $ENV{SFML_AUDIO_LIBRARY})

    TARGET_LINK_LIBRARIES(KVEngine opengl32)

ELSE()
    TARGET_LINK_LIBRARIES(KVEngine SDL_net)
    TARGET_LINK_LIBRARIES(KVEngine png)
    TARGET_LINK_LIBRARIES(KVEngine z)
    TARGET_LINK_LIBRARIES(KVEngine sfml-system)
    TARGET_LINK_LIBRARIES(KVEngine sfml-audio)

    TARGET_LINK_LIBRARIES(KVEngine GL)

ENDIF()

INSTALL(TARGETS KVEngine RUNTIME DESTINATION C:/Users/my/Documents/Qt/KVEngineQt/Exec)
